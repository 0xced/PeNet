<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <!-- The configuration and platform will be used to determine which assemblies to include from solution and
				 project documentation sources -->
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{e69f4e43-a8f3-44b8-9eeb-ef98e2f02933}</ProjectGuid>
    <SHFBSchemaVersion>2015.6.5.0</SHFBSchemaVersion>
    <!-- AssemblyName, Name, and RootNamespace are not used by SHFB but Visual Studio adds them anyway -->
    <AssemblyName>Documentation</AssemblyName>
    <RootNamespace>Documentation</RootNamespace>
    <Name>Documentation</Name>
    <!-- SHFB properties -->
    <FrameworkVersion>.NET Framework 4.6</FrameworkVersion>
    <OutputPath>.\Help\</OutputPath>
    <HtmlHelpName>PeNet Documentation</HtmlHelpName>
    <Language>en-US</Language>
    <DocumentationSources>
      <DocumentationSource sourceFile="GitHubVisualStudio\PeNet\PeNet2\PeNet.csproj" xmlns="" />
    </DocumentationSources>
    <BuildAssemblerVerbosity>OnlyWarningsAndErrors</BuildAssemblerVerbosity>
    <HelpFileFormat>HtmlHelp1, MSHelpViewer, Website</HelpFileFormat>
    <IndentHtml>False</IndentHtml>
    <KeepLogFile>True</KeepLogFile>
    <DisableCodeBlockComponent>False</DisableCodeBlockComponent>
    <CleanIntermediates>True</CleanIntermediates>
    <ProjectSummary>PeNet is .Net library written to parse and edit Windows Portable Executable %28PE%29 files. It&amp;#39%3bs completly written in managed code and does not depend on PInvoke. For example, PeNet show imports and exports of PE files, extracts certificate revocation lists from binary signatures or computes different file hashs incuding the ImpHash which is popular in malware analysis.

&amp;lt%3ba href=&amp;quot%3bhttps://github.com/secana/PeNet&amp;quot%3b&amp;gt%3bProject page&amp;lt%3b/a&amp;gt%3b</ProjectSummary>
    <NamespaceSummaries>
      <NamespaceSummaryItem name="(global)" isDocumented="True" xmlns="" />
<NamespaceSummaryItem name="PeNet" isDocumented="True" xmlns="">This is the main namespace where you find all functions and classes to analyse a PE file and interpret the different values and flags.</NamespaceSummaryItem>
<NamespaceSummaryItem name="PeNet.PatternMatching" isDocumented="True" xmlns="">The PatternMatching namespace contains functions to match strings and byte patterns. This is useful if you want to match for malware signatures.</NamespaceSummaryItem>
<NamespaceSummaryItem name="PeNet.Structures" isDocumented="True" xmlns="">The Structures namespace contains all Windows struct which are implemented in the library.</NamespaceSummaryItem></NamespaceSummaries>
    <HelpFileVersion>1.0.0.0</HelpFileVersion>
    <MaximumGroupParts>2</MaximumGroupParts>
    <NamespaceGrouping>False</NamespaceGrouping>
    <SyntaxFilters>Standard</SyntaxFilters>
    <SdkLinkTarget>Blank</SdkLinkTarget>
    <RootNamespaceTitle>PeNet Library</RootNamespaceTitle>
    <RootNamespaceContainer>True</RootNamespaceContainer>
    <PresentationStyle>VS2013</PresentationStyle>
    <Preliminary>False</Preliminary>
    <NamingMethod>Guid</NamingMethod>
    <HelpTitle>PeNet API Reference</HelpTitle>
    <CopyrightHref>http://www.apache.org/licenses/LICENSE-2.0</CopyrightHref>
    <ContentPlacement>AboveNamespaces</ContentPlacement>
  </PropertyGroup>
  <!-- There are no properties for these groups.  AnyCPU needs to appear in order for Visual Studio to perform
			 the build.  The others are optional common platform types that may appear. -->
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
  </PropertyGroup>
  <!-- Import the SHFB build targets -->
  <Import Project="$(SHFBROOT)\SandcastleHelpFileBuilder.targets" />
  <!-- The pre-build and post-build event properties must appear *after* the targets file import in order to be
			 evaluated correctly. -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
  </PropertyGroup>
</Project>